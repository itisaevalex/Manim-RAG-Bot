Source: https://docs.manim.community/en/latest/reference/manim.scene.moving_camera_scene.html

moving_camera_scene
¶
A scene whose camera can be moved around.
See also
moving_camera
Examples
Example: ChangingCameraWidthAndRestore
¶
from
manim
import
*
class
ChangingCameraWidthAndRestore
(
MovingCameraScene
):
def
construct
(
self
):
text
=
Text
(
"Hello World"
)
.
set_color
(
BLUE
)
self
.
add
(
text
)
self
.
camera
.
frame
.
save_state
()
self
.
play
(
self
.
camera
.
frame
.
animate
.
set
(
width
=
text
.
width
*
1.2
))
self
.
wait
(
0.3
)
self
.
play
(
Restore
(
self
.
camera
.
frame
))
class ChangingCameraWidthAndRestore(MovingCameraScene):
 def construct(self):
 text = Text("Hello World").set_color(BLUE)
 self.add(text)
 self.camera.frame.save_state()
 self.play(self.camera.frame.animate.set(width=text.width * 1.2))
 self.wait(0.3)
 self.play(Restore(self.camera.frame))
Example: MovingCameraCenter
¶
from
manim
import
*
class
MovingCameraCenter
(
MovingCameraScene
):
def
construct
(
self
):
s
=
Square
(
color
=
RED
,
fill_opacity
=
0.5
)
.
move_to
(
2
*
LEFT
)
t
=
Triangle
(
color
=
GREEN
,
fill_opacity
=
0.5
)
.
move_to
(
2
*
RIGHT
)
self
.
wait
(
0.3
)
self
.
add
(
s
,
t
)
self
.
play
(
self
.
camera
.
frame
.
animate
.
move_to
(
s
))
self
.
wait
(
0.3
)
self
.
play
(
self
.
camera
.
frame
.
animate
.
move_to
(
t
))
class MovingCameraCenter(MovingCameraScene):
 def construct(self):
 s = Square(color=RED, fill_opacity=0.5).move_to(2 * LEFT)
 t = Triangle(color=GREEN, fill_opacity=0.5).move_to(2 * RIGHT)
 self.wait(0.3)
 self.add(s, t)
 self.play(self.camera.frame.animate.move_to(s))
 self.wait(0.3)
 self.play(self.camera.frame.animate.move_to(t))
Example: MovingAndZoomingCamera
¶
from
manim
import
*
class
MovingAndZoomingCamera
(
MovingCameraScene
):
def
construct
(
self
):
s
=
Square
(
color
=
BLUE
,
fill_opacity
=
0.5
)
.
move_to
(
2
*
LEFT
)
t
=
Triangle
(
color
=
YELLOW
,
fill_opacity
=
0.5
)
.
move_to
(
2
*
RIGHT
)
self
.
add
(
s
,
t
)
self
.
play
(
self
.
camera
.
frame
.
animate
.
move_to
(
s
)
.
set
(
width
=
s
.
width
*
2
))
self
.
wait
(
0.3
)
self
.
play
(
self
.
camera
.
frame
.
animate
.
move_to
(
t
)
.
set
(
width
=
t
.
width
*
2
))
self
.
play
(
self
.
camera
.
frame
.
animate
.
move_to
(
ORIGIN
)
.
set
(
width
=
14
))
class MovingAndZoomingCamera(MovingCameraScene):
 def construct(self):
 s = Square(color=BLUE, fill_opacity=0.5).move_to(2 * LEFT)
 t = Triangle(color=YELLOW, fill_opacity=0.5).move_to(2 * RIGHT)
 self.add(s, t)
 self.play(self.camera.frame.animate.move_to(s).set(width=s.width*2))
 self.wait(0.3)
 self.play(self.camera.frame.animate.move_to(t).set(width=t.width*2))

 self.play(self.camera.frame.animate.move_to(ORIGIN).set(width=14))
Example: MovingCameraOnGraph
¶
from
manim
import
*
class
MovingCameraOnGraph
(
MovingCameraScene
):
def
construct
(
self
):
self
.
camera
.
frame
.
save_state
()
ax
=
Axes
(
x_range
=
[
-
1
,
10
],
y_range
=
[
-
1
,
10
])
graph
=
ax
.
plot
(
lambda
x
:
np
.
sin
(
x
),
color
=
WHITE
,
x_range
=
[
0
,
3
*
PI
])
dot_1
=
Dot
(
ax
.
i2gp
(
graph
.
t_min
,
graph
))
dot_2
=
Dot
(
ax
.
i2gp
(
graph
.
t_max
,
graph
))
self
.
add
(
ax
,
graph
,
dot_1
,
dot_2
)
self
.
play
(
self
.
camera
.
frame
.
animate
.
scale
(
0.5
)
.
move_to
(
dot_1
))
self
.
play
(
self
.
camera
.
frame
.
animate
.
move_to
(
dot_2
))
self
.
play
(
Restore
(
self
.
camera
.
frame
))
self
.
wait
()
class MovingCameraOnGraph(MovingCameraScene):
 def construct(self):
 self.camera.frame.save_state()

 ax = Axes(x_range=[-1, 10], y_range=[-1, 10])
 graph = ax.plot(lambda x: np.sin(x), color=WHITE, x_range=[0, 3 * PI])

 dot_1 = Dot(ax.i2gp(graph.t_min, graph))
 dot_2 = Dot(ax.i2gp(graph.t_max, graph))
 self.add(ax, graph, dot_1, dot_2)

 self.play(self.camera.frame.animate.scale(0.5).move_to(dot_1))
 self.play(self.camera.frame.animate.move_to(dot_2))
 self.play(Restore(self.camera.frame))
 self.wait()
Example: SlidingMultipleScenes
¶
from
manim
import
*
class
SlidingMultipleScenes
(
MovingCameraScene
):
def
construct
(
self
):
def
create_scene
(
number
):
frame
=
Rectangle
(
width
=
16
,
height
=
9
)
circ
=
Circle
()
.
shift
(
LEFT
)
text
=
Tex
(
f
"This is Scene
{
str
(
number
)
}
"
)
.
next_to
(
circ
,
RIGHT
)
frame
.
add
(
circ
,
text
)
return
frame
group
=
VGroup
(
*
(
create_scene
(
i
)
for
i
in
range
(
4
)))
.
arrange_in_grid
(
buff
=
4
)
self
.
add
(
group
)
self
.
camera
.
auto_zoom
(
group
[
0
],
animate
=
False
)
for
scene
in
group
:
self
.
play
(
self
.
camera
.
auto_zoom
(
scene
))
self
.
wait
()
self
.
play
(
self
.
camera
.
auto_zoom
(
group
,
margin
=
2
))
class SlidingMultipleScenes(MovingCameraScene):
 def construct(self):
 def create_scene(number):
 frame = Rectangle(width=16,height=9)
 circ = Circle().shift(LEFT)
 text = Tex(f"This is Scene {str(number)}").next_to(circ, RIGHT)
 frame.add(circ,text)
 return frame

 group = VGroup(*(create_scene(i) for i in range(4))).arrange_in_grid(buff=4)
 self.add(group)
 self.camera.auto_zoom(group[0], animate=False)
 for scene in group:
 self.play(self.camera.auto_zoom(scene))
 self.wait()

 self.play(self.camera.auto_zoom(group, margin=2))
Classes
MovingCameraScene
This is a Scene, with special configurations and properties that make it suitable for cases where the camera must be moved around.