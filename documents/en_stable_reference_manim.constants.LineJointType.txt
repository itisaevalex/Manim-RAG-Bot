Source: https://docs.manim.community/en/stable/reference/manim.constants.LineJointType.html

LineJointType
¶
Qualified name:
manim.constants.LineJointType
class
LineJointType
(
value
,
names=<not
given>
,
*values
,
module=None
,
qualname=None
,
type=None
,
start=1
,
boundary=None
)
[source]
¶
Bases:
Enum
Collection of available line joint types.
See the example below for a visual illustration of the different
joint types.
Examples
Example: LineJointVariants
¶
from
manim
import
*
class
LineJointVariants
(
Scene
):
def
construct
(
self
):
mob
=
VMobject
(
stroke_width
=
20
,
color
=
GREEN
)
.
set_points_as_corners
([
np
.
array
([
-
2
,
0
,
0
]),
np
.
array
([
0
,
0
,
0
]),
np
.
array
([
-
2
,
1
,
0
]),
])
lines
=
VGroup
(
*
[
mob
.
copy
()
for
_
in
range
(
len
(
LineJointType
))])
for
line
,
joint_type
in
zip
(
lines
,
LineJointType
):
line
.
joint_type
=
joint_type
lines
.
arrange
(
RIGHT
,
buff
=
1
)
self
.
add
(
lines
)
for
line
in
lines
:
label
=
Text
(
line
.
joint_type
.
name
)
.
next_to
(
line
,
DOWN
)
self
.
add
(
label
)
class LineJointVariants(Scene):
 def construct(self):
 mob = VMobject(stroke_width=20, color=GREEN).set_points_as_corners([
 np.array([-2, 0, 0]),
 np.array([0, 0, 0]),
 np.array([-2, 1, 0]),
 ])
 lines = VGroup(*[mob.copy() for _ in range(len(LineJointType))])
 for line, joint_type in zip(lines, LineJointType):
 line.joint_type = joint_type

 lines.arrange(RIGHT, buff=1)
 self.add(lines)
 for line in lines:
 label = Text(line.joint_type.name).next_to(line, DOWN)
 self.add(label)
Attributes
AUTO
ROUND
BEVEL
MITER